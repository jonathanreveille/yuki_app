# Generated by Django 3.2.4 on 2021-06-08 10:32

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(
                    max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(
                    blank=True, null=True, verbose_name='last login')),
                ('is_superuser',
                 models.BooleanField(default=False,
                        help_text='Designates that this user has all permissions without explicitly assigning them.',  # noqa
                                     verbose_name='superuser status')),
                (
                    'username',
                    models.CharField(
                        error_messages={
                            'unique': 'A user with that username already exists.'},  # noqa
                        help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',  # noqa
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()],  # noqa
                        verbose_name='username')),
                ('first_name', models.CharField(blank=True,
                 max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True,
                 max_length=150, verbose_name='last name')),
                ('is_staff',
                 models.BooleanField(default=False,
                                     help_text='Designates whether the user can log into this admin site.',  # noqa
                                     verbose_name='staff status')),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',  # noqa
                        verbose_name='active')),
                ('date_joined', models.DateTimeField(
                    default=django.utils.timezone.now, verbose_name='date joined')),  # noqa
                ('email', models.EmailField(max_length=255,
                 unique=True, verbose_name='user email')),
                ('location', models.CharField(blank=True, max_length=30)),
                ('avatar', models.ImageField(
                    default='avatar_profile.jpg', upload_to='avatars/')),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to.\
                A user will get all permissions granted to each of their groups.',  # noqa
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.Group',
                        verbose_name='groups')),
                ('role',
                 models.ForeignKey(blank=True,
                                   null=True,
                                   on_delete=django.db.models.deletion.CASCADE,  # noqa
                                   related_name='role',
                                   to='users.role')),  # noqa
                ('user_permissions',
                 models.ManyToManyField(blank=True,
                                        help_text='Specific permissions for this user.',  # noqa
                                        related_name='user_set',
                                        related_query_name='user',
                                        to='auth.Permission',
                                        verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
